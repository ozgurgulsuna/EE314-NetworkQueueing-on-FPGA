// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/03/2022 12:55:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decision_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decision_test_vlg_sample_tst(
	fract_clk,
	pin,
	read_clk,
	write,
	sampler_tx
);
input  fract_clk;
input [3:0] pin;
input  read_clk;
input [3:0] write;
output sampler_tx;

reg sample;
time current_time;
always @(fract_clk or pin or read_clk or write)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decision_test_vlg_check_tst (
	full1,
	full2,
	full3,
	full4,
	MEM_1,
	MEM_2,
	MEM_3,
	MEM_4,
	sampler_rx
);
input [2:0] full1;
input [2:0] full2;
input [2:0] full3;
input [2:0] full4;
input [23:0] MEM_1;
input [23:0] MEM_2;
input [23:0] MEM_3;
input [23:0] MEM_4;
input sampler_rx;

reg [2:0] full1_expected;
reg [2:0] full2_expected;
reg [2:0] full3_expected;
reg [2:0] full4_expected;
reg [23:0] MEM_1_expected;
reg [23:0] MEM_2_expected;
reg [23:0] MEM_3_expected;
reg [23:0] MEM_4_expected;

reg [2:0] full1_prev;
reg [2:0] full2_prev;
reg [2:0] full3_prev;
reg [2:0] full4_prev;
reg [23:0] MEM_1_prev;
reg [23:0] MEM_2_prev;
reg [23:0] MEM_3_prev;
reg [23:0] MEM_4_prev;

reg [2:0] full1_expected_prev;
reg [2:0] full2_expected_prev;
reg [2:0] full3_expected_prev;
reg [2:0] full4_expected_prev;
reg [23:0] MEM_1_expected_prev;
reg [23:0] MEM_2_expected_prev;

reg [2:0] last_full1_exp;
reg [2:0] last_full2_exp;
reg [2:0] last_full3_exp;
reg [2:0] last_full4_exp;
reg [23:0] last_MEM_1_exp;
reg [23:0] last_MEM_2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	full1_prev = full1;
	full2_prev = full2;
	full3_prev = full3;
	full4_prev = full4;
	MEM_1_prev = MEM_1;
	MEM_2_prev = MEM_2;
	MEM_3_prev = MEM_3;
	MEM_4_prev = MEM_4;
end

// update expected /o prevs

always @(trigger)
begin
	full1_expected_prev = full1_expected;
	full2_expected_prev = full2_expected;
	full3_expected_prev = full3_expected;
	full4_expected_prev = full4_expected;
	MEM_1_expected_prev = MEM_1_expected;
	MEM_2_expected_prev = MEM_2_expected;
end


// expected full4[ 2 ]
initial
begin
	full4_expected[2] = 1'bX;
end 
// expected full4[ 1 ]
initial
begin
	full4_expected[1] = 1'bX;
end 
// expected full4[ 0 ]
initial
begin
	full4_expected[0] = 1'bX;
end 
// expected full3[ 2 ]
initial
begin
	full3_expected[2] = 1'bX;
end 
// expected full3[ 1 ]
initial
begin
	full3_expected[1] = 1'bX;
end 
// expected full3[ 0 ]
initial
begin
	full3_expected[0] = 1'bX;
end 
// expected full2[ 2 ]
initial
begin
	full2_expected[2] = 1'bX;
end 
// expected full2[ 1 ]
initial
begin
	full2_expected[1] = 1'bX;
end 
// expected full2[ 0 ]
initial
begin
	full2_expected[0] = 1'bX;
end 
// expected full1[ 2 ]
initial
begin
	full1_expected[2] = 1'bX;
end 
// expected full1[ 1 ]
initial
begin
	full1_expected[1] = 1'bX;
end 
// expected full1[ 0 ]
initial
begin
	full1_expected[0] = 1'bX;
end 
// expected MEM_1[ 23 ]
initial
begin
	MEM_1_expected[23] = 1'b0;
end 
// expected MEM_1[ 22 ]
initial
begin
	MEM_1_expected[22] = 1'b0;
end 
// expected MEM_1[ 21 ]
initial
begin
	MEM_1_expected[21] = 1'b0;
end 
// expected MEM_1[ 20 ]
initial
begin
	MEM_1_expected[20] = 1'b0;
end 
// expected MEM_1[ 19 ]
initial
begin
	MEM_1_expected[19] = 1'b0;
end 
// expected MEM_1[ 18 ]
initial
begin
	MEM_1_expected[18] = 1'b0;
end 
// expected MEM_1[ 17 ]
initial
begin
	MEM_1_expected[17] = 1'b0;
end 
// expected MEM_1[ 16 ]
initial
begin
	MEM_1_expected[16] = 1'b0;
end 
// expected MEM_1[ 15 ]
initial
begin
	MEM_1_expected[15] = 1'b0;
end 
// expected MEM_1[ 14 ]
initial
begin
	MEM_1_expected[14] = 1'b0;
end 
// expected MEM_1[ 13 ]
initial
begin
	MEM_1_expected[13] = 1'b0;
end 
// expected MEM_1[ 12 ]
initial
begin
	MEM_1_expected[12] = 1'b0;
end 
// expected MEM_1[ 11 ]
initial
begin
	MEM_1_expected[11] = 1'b0;
end 
// expected MEM_1[ 10 ]
initial
begin
	MEM_1_expected[10] = 1'b0;
end 
// expected MEM_1[ 9 ]
initial
begin
	MEM_1_expected[9] = 1'b0;
end 
// expected MEM_1[ 8 ]
initial
begin
	MEM_1_expected[8] = 1'b0;
end 
// expected MEM_1[ 7 ]
initial
begin
	MEM_1_expected[7] = 1'b0;
end 
// expected MEM_1[ 6 ]
initial
begin
	MEM_1_expected[6] = 1'b0;
end 
// expected MEM_1[ 5 ]
initial
begin
	MEM_1_expected[5] = 1'b0;
end 
// expected MEM_1[ 4 ]
initial
begin
	MEM_1_expected[4] = 1'b0;
end 
// expected MEM_1[ 3 ]
initial
begin
	MEM_1_expected[3] = 1'b0;
end 
// expected MEM_1[ 2 ]
initial
begin
	MEM_1_expected[2] = 1'b0;
end 
// expected MEM_1[ 1 ]
initial
begin
	MEM_1_expected[1] = 1'b0;
end 
// expected MEM_1[ 0 ]
initial
begin
	MEM_1_expected[0] = 1'b0;
end 
// expected MEM_2[ 23 ]
initial
begin
	MEM_2_expected[23] = 1'bX;
end 
// expected MEM_2[ 22 ]
initial
begin
	MEM_2_expected[22] = 1'bX;
end 
// expected MEM_2[ 21 ]
initial
begin
	MEM_2_expected[21] = 1'bX;
end 
// expected MEM_2[ 20 ]
initial
begin
	MEM_2_expected[20] = 1'bX;
end 
// expected MEM_2[ 19 ]
initial
begin
	MEM_2_expected[19] = 1'bX;
end 
// expected MEM_2[ 18 ]
initial
begin
	MEM_2_expected[18] = 1'bX;
end 
// expected MEM_2[ 17 ]
initial
begin
	MEM_2_expected[17] = 1'bX;
end 
// expected MEM_2[ 16 ]
initial
begin
	MEM_2_expected[16] = 1'bX;
end 
// expected MEM_2[ 15 ]
initial
begin
	MEM_2_expected[15] = 1'bX;
end 
// expected MEM_2[ 14 ]
initial
begin
	MEM_2_expected[14] = 1'bX;
end 
// expected MEM_2[ 13 ]
initial
begin
	MEM_2_expected[13] = 1'bX;
end 
// expected MEM_2[ 12 ]
initial
begin
	MEM_2_expected[12] = 1'bX;
end 
// expected MEM_2[ 11 ]
initial
begin
	MEM_2_expected[11] = 1'bX;
end 
// expected MEM_2[ 10 ]
initial
begin
	MEM_2_expected[10] = 1'bX;
end 
// expected MEM_2[ 9 ]
initial
begin
	MEM_2_expected[9] = 1'bX;
end 
// expected MEM_2[ 8 ]
initial
begin
	MEM_2_expected[8] = 1'bX;
end 
// expected MEM_2[ 7 ]
initial
begin
	MEM_2_expected[7] = 1'bX;
end 
// expected MEM_2[ 6 ]
initial
begin
	MEM_2_expected[6] = 1'bX;
end 
// expected MEM_2[ 5 ]
initial
begin
	MEM_2_expected[5] = 1'bX;
end 
// expected MEM_2[ 4 ]
initial
begin
	MEM_2_expected[4] = 1'bX;
end 
// expected MEM_2[ 3 ]
initial
begin
	MEM_2_expected[3] = 1'bX;
end 
// expected MEM_2[ 2 ]
initial
begin
	MEM_2_expected[2] = 1'bX;
end 
// expected MEM_2[ 1 ]
initial
begin
	MEM_2_expected[1] = 1'bX;
end 
// expected MEM_2[ 0 ]
initial
begin
	MEM_2_expected[0] = 1'bX;
end 
// generate trigger
always @(full1_expected or full1 or full2_expected or full2 or full3_expected or full3 or full4_expected or full4 or MEM_1_expected or MEM_1 or MEM_2_expected or MEM_2 or MEM_3_expected or MEM_3 or MEM_4_expected or MEM_4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected full1 = %b | expected full2 = %b | expected full3 = %b | expected full4 = %b | expected MEM_1 = %b | expected MEM_2 = %b | expected MEM_3 = %b | expected MEM_4 = %b | ",full1_expected_prev,full2_expected_prev,full3_expected_prev,full4_expected_prev,MEM_1_expected_prev,MEM_2_expected_prev,MEM_3_expected_prev,MEM_4_expected_prev);
	$display("| real full1 = %b | real full2 = %b | real full3 = %b | real full4 = %b | real MEM_1 = %b | real MEM_2 = %b | real MEM_3 = %b | real MEM_4 = %b | ",full1_prev,full2_prev,full3_prev,full4_prev,MEM_1_prev,MEM_2_prev,MEM_3_prev,MEM_4_prev);
`endif
	if (
		( full1_expected_prev[0] !== 1'bx ) && ( full1_prev[0] !== full1_expected_prev[0] )
		&& ((full1_expected_prev[0] !== last_full1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full1_expected_prev);
		$display ("     Real value = %b", full1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_full1_exp[0] = full1_expected_prev[0];
	end
	if (
		( full1_expected_prev[1] !== 1'bx ) && ( full1_prev[1] !== full1_expected_prev[1] )
		&& ((full1_expected_prev[1] !== last_full1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full1_expected_prev);
		$display ("     Real value = %b", full1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_full1_exp[1] = full1_expected_prev[1];
	end
	if (
		( full1_expected_prev[2] !== 1'bx ) && ( full1_prev[2] !== full1_expected_prev[2] )
		&& ((full1_expected_prev[2] !== last_full1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full1_expected_prev);
		$display ("     Real value = %b", full1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_full1_exp[2] = full1_expected_prev[2];
	end
	if (
		( full2_expected_prev[0] !== 1'bx ) && ( full2_prev[0] !== full2_expected_prev[0] )
		&& ((full2_expected_prev[0] !== last_full2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full2_expected_prev);
		$display ("     Real value = %b", full2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_full2_exp[0] = full2_expected_prev[0];
	end
	if (
		( full2_expected_prev[1] !== 1'bx ) && ( full2_prev[1] !== full2_expected_prev[1] )
		&& ((full2_expected_prev[1] !== last_full2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full2_expected_prev);
		$display ("     Real value = %b", full2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_full2_exp[1] = full2_expected_prev[1];
	end
	if (
		( full2_expected_prev[2] !== 1'bx ) && ( full2_prev[2] !== full2_expected_prev[2] )
		&& ((full2_expected_prev[2] !== last_full2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full2_expected_prev);
		$display ("     Real value = %b", full2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_full2_exp[2] = full2_expected_prev[2];
	end
	if (
		( full3_expected_prev[0] !== 1'bx ) && ( full3_prev[0] !== full3_expected_prev[0] )
		&& ((full3_expected_prev[0] !== last_full3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full3_expected_prev);
		$display ("     Real value = %b", full3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_full3_exp[0] = full3_expected_prev[0];
	end
	if (
		( full3_expected_prev[1] !== 1'bx ) && ( full3_prev[1] !== full3_expected_prev[1] )
		&& ((full3_expected_prev[1] !== last_full3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full3_expected_prev);
		$display ("     Real value = %b", full3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_full3_exp[1] = full3_expected_prev[1];
	end
	if (
		( full3_expected_prev[2] !== 1'bx ) && ( full3_prev[2] !== full3_expected_prev[2] )
		&& ((full3_expected_prev[2] !== last_full3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full3_expected_prev);
		$display ("     Real value = %b", full3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_full3_exp[2] = full3_expected_prev[2];
	end
	if (
		( full4_expected_prev[0] !== 1'bx ) && ( full4_prev[0] !== full4_expected_prev[0] )
		&& ((full4_expected_prev[0] !== last_full4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full4_expected_prev);
		$display ("     Real value = %b", full4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_full4_exp[0] = full4_expected_prev[0];
	end
	if (
		( full4_expected_prev[1] !== 1'bx ) && ( full4_prev[1] !== full4_expected_prev[1] )
		&& ((full4_expected_prev[1] !== last_full4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full4_expected_prev);
		$display ("     Real value = %b", full4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_full4_exp[1] = full4_expected_prev[1];
	end
	if (
		( full4_expected_prev[2] !== 1'bx ) && ( full4_prev[2] !== full4_expected_prev[2] )
		&& ((full4_expected_prev[2] !== last_full4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full4_expected_prev);
		$display ("     Real value = %b", full4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_full4_exp[2] = full4_expected_prev[2];
	end
	if (
		( MEM_1_expected_prev[0] !== 1'bx ) && ( MEM_1_prev[0] !== MEM_1_expected_prev[0] )
		&& ((MEM_1_expected_prev[0] !== last_MEM_1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[0] = MEM_1_expected_prev[0];
	end
	if (
		( MEM_1_expected_prev[1] !== 1'bx ) && ( MEM_1_prev[1] !== MEM_1_expected_prev[1] )
		&& ((MEM_1_expected_prev[1] !== last_MEM_1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[1] = MEM_1_expected_prev[1];
	end
	if (
		( MEM_1_expected_prev[2] !== 1'bx ) && ( MEM_1_prev[2] !== MEM_1_expected_prev[2] )
		&& ((MEM_1_expected_prev[2] !== last_MEM_1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[2] = MEM_1_expected_prev[2];
	end
	if (
		( MEM_1_expected_prev[3] !== 1'bx ) && ( MEM_1_prev[3] !== MEM_1_expected_prev[3] )
		&& ((MEM_1_expected_prev[3] !== last_MEM_1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[3] = MEM_1_expected_prev[3];
	end
	if (
		( MEM_1_expected_prev[4] !== 1'bx ) && ( MEM_1_prev[4] !== MEM_1_expected_prev[4] )
		&& ((MEM_1_expected_prev[4] !== last_MEM_1_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[4] = MEM_1_expected_prev[4];
	end
	if (
		( MEM_1_expected_prev[5] !== 1'bx ) && ( MEM_1_prev[5] !== MEM_1_expected_prev[5] )
		&& ((MEM_1_expected_prev[5] !== last_MEM_1_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[5] = MEM_1_expected_prev[5];
	end
	if (
		( MEM_1_expected_prev[6] !== 1'bx ) && ( MEM_1_prev[6] !== MEM_1_expected_prev[6] )
		&& ((MEM_1_expected_prev[6] !== last_MEM_1_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[6] = MEM_1_expected_prev[6];
	end
	if (
		( MEM_1_expected_prev[7] !== 1'bx ) && ( MEM_1_prev[7] !== MEM_1_expected_prev[7] )
		&& ((MEM_1_expected_prev[7] !== last_MEM_1_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[7] = MEM_1_expected_prev[7];
	end
	if (
		( MEM_1_expected_prev[8] !== 1'bx ) && ( MEM_1_prev[8] !== MEM_1_expected_prev[8] )
		&& ((MEM_1_expected_prev[8] !== last_MEM_1_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[8] = MEM_1_expected_prev[8];
	end
	if (
		( MEM_1_expected_prev[9] !== 1'bx ) && ( MEM_1_prev[9] !== MEM_1_expected_prev[9] )
		&& ((MEM_1_expected_prev[9] !== last_MEM_1_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[9] = MEM_1_expected_prev[9];
	end
	if (
		( MEM_1_expected_prev[10] !== 1'bx ) && ( MEM_1_prev[10] !== MEM_1_expected_prev[10] )
		&& ((MEM_1_expected_prev[10] !== last_MEM_1_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[10] = MEM_1_expected_prev[10];
	end
	if (
		( MEM_1_expected_prev[11] !== 1'bx ) && ( MEM_1_prev[11] !== MEM_1_expected_prev[11] )
		&& ((MEM_1_expected_prev[11] !== last_MEM_1_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[11] = MEM_1_expected_prev[11];
	end
	if (
		( MEM_1_expected_prev[12] !== 1'bx ) && ( MEM_1_prev[12] !== MEM_1_expected_prev[12] )
		&& ((MEM_1_expected_prev[12] !== last_MEM_1_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[12] = MEM_1_expected_prev[12];
	end
	if (
		( MEM_1_expected_prev[13] !== 1'bx ) && ( MEM_1_prev[13] !== MEM_1_expected_prev[13] )
		&& ((MEM_1_expected_prev[13] !== last_MEM_1_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[13] = MEM_1_expected_prev[13];
	end
	if (
		( MEM_1_expected_prev[14] !== 1'bx ) && ( MEM_1_prev[14] !== MEM_1_expected_prev[14] )
		&& ((MEM_1_expected_prev[14] !== last_MEM_1_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[14] = MEM_1_expected_prev[14];
	end
	if (
		( MEM_1_expected_prev[15] !== 1'bx ) && ( MEM_1_prev[15] !== MEM_1_expected_prev[15] )
		&& ((MEM_1_expected_prev[15] !== last_MEM_1_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[15] = MEM_1_expected_prev[15];
	end
	if (
		( MEM_1_expected_prev[16] !== 1'bx ) && ( MEM_1_prev[16] !== MEM_1_expected_prev[16] )
		&& ((MEM_1_expected_prev[16] !== last_MEM_1_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[16] = MEM_1_expected_prev[16];
	end
	if (
		( MEM_1_expected_prev[17] !== 1'bx ) && ( MEM_1_prev[17] !== MEM_1_expected_prev[17] )
		&& ((MEM_1_expected_prev[17] !== last_MEM_1_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[17] = MEM_1_expected_prev[17];
	end
	if (
		( MEM_1_expected_prev[18] !== 1'bx ) && ( MEM_1_prev[18] !== MEM_1_expected_prev[18] )
		&& ((MEM_1_expected_prev[18] !== last_MEM_1_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[18] = MEM_1_expected_prev[18];
	end
	if (
		( MEM_1_expected_prev[19] !== 1'bx ) && ( MEM_1_prev[19] !== MEM_1_expected_prev[19] )
		&& ((MEM_1_expected_prev[19] !== last_MEM_1_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[19] = MEM_1_expected_prev[19];
	end
	if (
		( MEM_1_expected_prev[20] !== 1'bx ) && ( MEM_1_prev[20] !== MEM_1_expected_prev[20] )
		&& ((MEM_1_expected_prev[20] !== last_MEM_1_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[20] = MEM_1_expected_prev[20];
	end
	if (
		( MEM_1_expected_prev[21] !== 1'bx ) && ( MEM_1_prev[21] !== MEM_1_expected_prev[21] )
		&& ((MEM_1_expected_prev[21] !== last_MEM_1_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[21] = MEM_1_expected_prev[21];
	end
	if (
		( MEM_1_expected_prev[22] !== 1'bx ) && ( MEM_1_prev[22] !== MEM_1_expected_prev[22] )
		&& ((MEM_1_expected_prev[22] !== last_MEM_1_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[22] = MEM_1_expected_prev[22];
	end
	if (
		( MEM_1_expected_prev[23] !== 1'bx ) && ( MEM_1_prev[23] !== MEM_1_expected_prev[23] )
		&& ((MEM_1_expected_prev[23] !== last_MEM_1_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_1_expected_prev);
		$display ("     Real value = %b", MEM_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MEM_1_exp[23] = MEM_1_expected_prev[23];
	end
	if (
		( MEM_2_expected_prev[0] !== 1'bx ) && ( MEM_2_prev[0] !== MEM_2_expected_prev[0] )
		&& ((MEM_2_expected_prev[0] !== last_MEM_2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[0] = MEM_2_expected_prev[0];
	end
	if (
		( MEM_2_expected_prev[1] !== 1'bx ) && ( MEM_2_prev[1] !== MEM_2_expected_prev[1] )
		&& ((MEM_2_expected_prev[1] !== last_MEM_2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[1] = MEM_2_expected_prev[1];
	end
	if (
		( MEM_2_expected_prev[2] !== 1'bx ) && ( MEM_2_prev[2] !== MEM_2_expected_prev[2] )
		&& ((MEM_2_expected_prev[2] !== last_MEM_2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[2] = MEM_2_expected_prev[2];
	end
	if (
		( MEM_2_expected_prev[3] !== 1'bx ) && ( MEM_2_prev[3] !== MEM_2_expected_prev[3] )
		&& ((MEM_2_expected_prev[3] !== last_MEM_2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[3] = MEM_2_expected_prev[3];
	end
	if (
		( MEM_2_expected_prev[4] !== 1'bx ) && ( MEM_2_prev[4] !== MEM_2_expected_prev[4] )
		&& ((MEM_2_expected_prev[4] !== last_MEM_2_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[4] = MEM_2_expected_prev[4];
	end
	if (
		( MEM_2_expected_prev[5] !== 1'bx ) && ( MEM_2_prev[5] !== MEM_2_expected_prev[5] )
		&& ((MEM_2_expected_prev[5] !== last_MEM_2_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[5] = MEM_2_expected_prev[5];
	end
	if (
		( MEM_2_expected_prev[6] !== 1'bx ) && ( MEM_2_prev[6] !== MEM_2_expected_prev[6] )
		&& ((MEM_2_expected_prev[6] !== last_MEM_2_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[6] = MEM_2_expected_prev[6];
	end
	if (
		( MEM_2_expected_prev[7] !== 1'bx ) && ( MEM_2_prev[7] !== MEM_2_expected_prev[7] )
		&& ((MEM_2_expected_prev[7] !== last_MEM_2_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[7] = MEM_2_expected_prev[7];
	end
	if (
		( MEM_2_expected_prev[8] !== 1'bx ) && ( MEM_2_prev[8] !== MEM_2_expected_prev[8] )
		&& ((MEM_2_expected_prev[8] !== last_MEM_2_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[8] = MEM_2_expected_prev[8];
	end
	if (
		( MEM_2_expected_prev[9] !== 1'bx ) && ( MEM_2_prev[9] !== MEM_2_expected_prev[9] )
		&& ((MEM_2_expected_prev[9] !== last_MEM_2_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[9] = MEM_2_expected_prev[9];
	end
	if (
		( MEM_2_expected_prev[10] !== 1'bx ) && ( MEM_2_prev[10] !== MEM_2_expected_prev[10] )
		&& ((MEM_2_expected_prev[10] !== last_MEM_2_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[10] = MEM_2_expected_prev[10];
	end
	if (
		( MEM_2_expected_prev[11] !== 1'bx ) && ( MEM_2_prev[11] !== MEM_2_expected_prev[11] )
		&& ((MEM_2_expected_prev[11] !== last_MEM_2_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[11] = MEM_2_expected_prev[11];
	end
	if (
		( MEM_2_expected_prev[12] !== 1'bx ) && ( MEM_2_prev[12] !== MEM_2_expected_prev[12] )
		&& ((MEM_2_expected_prev[12] !== last_MEM_2_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[12] = MEM_2_expected_prev[12];
	end
	if (
		( MEM_2_expected_prev[13] !== 1'bx ) && ( MEM_2_prev[13] !== MEM_2_expected_prev[13] )
		&& ((MEM_2_expected_prev[13] !== last_MEM_2_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[13] = MEM_2_expected_prev[13];
	end
	if (
		( MEM_2_expected_prev[14] !== 1'bx ) && ( MEM_2_prev[14] !== MEM_2_expected_prev[14] )
		&& ((MEM_2_expected_prev[14] !== last_MEM_2_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[14] = MEM_2_expected_prev[14];
	end
	if (
		( MEM_2_expected_prev[15] !== 1'bx ) && ( MEM_2_prev[15] !== MEM_2_expected_prev[15] )
		&& ((MEM_2_expected_prev[15] !== last_MEM_2_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[15] = MEM_2_expected_prev[15];
	end
	if (
		( MEM_2_expected_prev[16] !== 1'bx ) && ( MEM_2_prev[16] !== MEM_2_expected_prev[16] )
		&& ((MEM_2_expected_prev[16] !== last_MEM_2_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[16] = MEM_2_expected_prev[16];
	end
	if (
		( MEM_2_expected_prev[17] !== 1'bx ) && ( MEM_2_prev[17] !== MEM_2_expected_prev[17] )
		&& ((MEM_2_expected_prev[17] !== last_MEM_2_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[17] = MEM_2_expected_prev[17];
	end
	if (
		( MEM_2_expected_prev[18] !== 1'bx ) && ( MEM_2_prev[18] !== MEM_2_expected_prev[18] )
		&& ((MEM_2_expected_prev[18] !== last_MEM_2_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[18] = MEM_2_expected_prev[18];
	end
	if (
		( MEM_2_expected_prev[19] !== 1'bx ) && ( MEM_2_prev[19] !== MEM_2_expected_prev[19] )
		&& ((MEM_2_expected_prev[19] !== last_MEM_2_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[19] = MEM_2_expected_prev[19];
	end
	if (
		( MEM_2_expected_prev[20] !== 1'bx ) && ( MEM_2_prev[20] !== MEM_2_expected_prev[20] )
		&& ((MEM_2_expected_prev[20] !== last_MEM_2_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[20] = MEM_2_expected_prev[20];
	end
	if (
		( MEM_2_expected_prev[21] !== 1'bx ) && ( MEM_2_prev[21] !== MEM_2_expected_prev[21] )
		&& ((MEM_2_expected_prev[21] !== last_MEM_2_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[21] = MEM_2_expected_prev[21];
	end
	if (
		( MEM_2_expected_prev[22] !== 1'bx ) && ( MEM_2_prev[22] !== MEM_2_expected_prev[22] )
		&& ((MEM_2_expected_prev[22] !== last_MEM_2_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[22] = MEM_2_expected_prev[22];
	end
	if (
		( MEM_2_expected_prev[23] !== 1'bx ) && ( MEM_2_prev[23] !== MEM_2_expected_prev[23] )
		&& ((MEM_2_expected_prev[23] !== last_MEM_2_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_2_expected_prev);
		$display ("     Real value = %b", MEM_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MEM_2_exp[23] = MEM_2_expected_prev[23];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decision_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg fract_clk;
reg [3:0] pin;
reg read_clk;
reg [3:0] write;
// wires                                               
wire [2:0] full1;
wire [2:0] full2;
wire [2:0] full3;
wire [2:0] full4;
wire [23:0] MEM_1;
wire [23:0] MEM_2;
wire [23:0] MEM_3;
wire [23:0] MEM_4;

wire sampler;                             

// assign statements (if any)                          
decision_test i1 (
// port map - connection between master ports and signals/registers   
	.fract_clk(fract_clk),
	.full1(full1),
	.full2(full2),
	.full3(full3),
	.full4(full4),
	.MEM_1(MEM_1),
	.MEM_2(MEM_2),
	.MEM_3(MEM_3),
	.MEM_4(MEM_4),
	.pin(pin),
	.read_clk(read_clk),
	.write(write)
);

// read_clk
initial
begin
	read_clk = 1'b0;
	read_clk = #100000 1'b1;
	read_clk = #10000 1'b0;
	read_clk = #90000 1'b1;
	read_clk = #10000 1'b0;
	read_clk = #90000 1'b1;
	read_clk = #10000 1'b0;
	read_clk = #90000 1'b1;
	read_clk = #10000 1'b0;
	read_clk = #90000 1'b1;
	read_clk = #10000 1'b0;
	read_clk = #90000 1'b1;
	read_clk = #10000 1'b0;
	read_clk = #90000 1'b1;
	read_clk = #10000 1'b0;
	read_clk = #90000 1'b1;
	read_clk = #10000 1'b0;
	read_clk = #90000 1'b1;
	read_clk = #10000 1'b0;
end 

// fract_clk
initial
begin
	fract_clk = 1'b1;
	# 2000;
	repeat(99)
	begin
		fract_clk = 1'b0;
		fract_clk = #8000 1'b1;
		# 2000;
	end
	fract_clk = 1'b0;
end 
// pin[ 3 ]
initial
begin
	pin[3] = 1'b1;
	pin[3] = #400000 1'b0;
	pin[3] = #80000 1'b1;
	pin[3] = #160000 1'b0;
	pin[3] = #320000 1'b1;
end 
// pin[ 2 ]
initial
begin
	pin[2] = 1'b1;
	pin[2] = #320000 1'b0;
	pin[2] = #80000 1'b1;
	pin[2] = #160000 1'b0;
	pin[2] = #240000 1'b1;
	pin[2] = #160000 1'b0;
end 
// pin[ 1 ]
initial
begin
	pin[1] = 1'b1;
	pin[1] = #80000 1'b0;
	pin[1] = #80000 1'b1;
	pin[1] = #240000 1'b0;
	pin[1] = #80000 1'b1;
	pin[1] = #400000 1'b0;
end 
// pin[ 0 ]
initial
begin
	pin[0] = 1'b1;
	pin[0] = #160000 1'b0;
	pin[0] = #80000 1'b1;
	pin[0] = #80000 1'b0;
	pin[0] = #80000 1'b1;
	pin[0] = #80000 1'b0;
	pin[0] = #160000 1'b1;
	pin[0] = #160000 1'b0;
end 
// write[ 3 ]
initial
begin
	write[3] = 1'b0;
	write[3] = #50000 1'b1;
	# 10000;
	repeat(9)
	begin
		write[3] = 1'b0;
		write[3] = #90000 1'b1;
		# 10000;
	end
	write[3] = 1'b0;
end 
// write[ 2 ]
initial
begin
	write[2] = 1'b0;
	write[2] = #70000 1'b1;
	# 10000;
	repeat(9)
	begin
		write[2] = 1'b0;
		write[2] = #90000 1'b1;
		# 10000;
	end
	write[2] = 1'b0;
end 
// write[ 1 ]
initial
begin
	write[1] = 1'b0;
	write[1] = #30000 1'b1;
	# 10000;
	repeat(9)
	begin
		write[1] = 1'b0;
		write[1] = #90000 1'b1;
		# 10000;
	end
	write[1] = 1'b0;
end 
// write[ 0 ]
initial
begin
	write[0] = 1'b0;
	write[0] = #10000 1'b1;
	# 10000;
	repeat(9)
	begin
		write[0] = 1'b0;
		write[0] = #90000 1'b1;
		# 10000;
	end
	write[0] = 1'b0;
end 

decision_test_vlg_sample_tst tb_sample (
	.fract_clk(fract_clk),
	.pin(pin),
	.read_clk(read_clk),
	.write(write),
	.sampler_tx(sampler)
);

decision_test_vlg_check_tst tb_out(
	.full1(full1),
	.full2(full2),
	.full3(full3),
	.full4(full4),
	.MEM_1(MEM_1),
	.MEM_2(MEM_2),
	.MEM_3(MEM_3),
	.MEM_4(MEM_4),
	.sampler_rx(sampler)
);
endmodule

