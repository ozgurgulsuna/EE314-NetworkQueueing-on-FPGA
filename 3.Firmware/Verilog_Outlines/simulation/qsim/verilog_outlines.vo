// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.1.0 Build 162 10/23/2013 SJ Web Edition"

// DATE "07/02/2022 18:45:11"

// 
// Device: Altera 5CSEMA5F31C6 Package FBGA896
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module debouncer (
	pb_1,
	clk,
	pb_out);
input 	pb_1;
input 	clk;
output 	pb_out;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \pb_out~output_o ;
wire \clk~input_o ;
wire \pb_1~input_o ;
wire \d0|Q~q ;
wire \d1|Q~q ;
wire \d2|Q~q ;
wire \pb_out~0_combout ;


cyclonev_io_obuf \pb_out~output (
	.i(\pb_out~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\pb_out~output_o ),
	.obar());
// synopsys translate_off
defparam \pb_out~output .bus_hold = "false";
defparam \pb_out~output .open_drain_output = "false";
defparam \pb_out~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \clk~input (
	.i(clk),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\clk~input_o ));
// synopsys translate_off
defparam \clk~input .bus_hold = "false";
defparam \clk~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \pb_1~input (
	.i(pb_1),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\pb_1~input_o ));
// synopsys translate_off
defparam \pb_1~input .bus_hold = "false";
defparam \pb_1~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \d0|Q (
	.clk(\clk~input_o ),
	.d(\pb_1~input_o ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\d0|Q~q ),
	.prn(vcc));
// synopsys translate_off
defparam \d0|Q .is_wysiwyg = "true";
defparam \d0|Q .power_up = "low";
// synopsys translate_on

dffeas \d1|Q (
	.clk(\clk~input_o ),
	.d(\d0|Q~q ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\d1|Q~q ),
	.prn(vcc));
// synopsys translate_off
defparam \d1|Q .is_wysiwyg = "true";
defparam \d1|Q .power_up = "low";
// synopsys translate_on

dffeas \d2|Q (
	.clk(\clk~input_o ),
	.d(\d1|Q~q ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\d2|Q~q ),
	.prn(vcc));
// synopsys translate_off
defparam \d2|Q .is_wysiwyg = "true";
defparam \d2|Q .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \pb_out~0 (
// Equation(s):
// \pb_out~0_combout  = (\d1|Q~q  & !\d2|Q~q )

	.dataa(!\d1|Q~q ),
	.datab(!\d2|Q~q ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\pb_out~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \pb_out~0 .extended_lut = "off";
defparam \pb_out~0 .lut_mask = 64'h4444444444444444;
defparam \pb_out~0 .shared_arith = "off";
// synopsys translate_on

assign pb_out = \pb_out~output_o ;

endmodule
